/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package salasDisponibles;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import salaEspera.TableGradientCell;

/**
 * Ventana que muestra las salas disponibles para unirse. Permite a los usuarios
 * unirse a una sala seleccionada si hay espacio disponible.
 *
 * @author Sebastian Murrieta
 */
public class SalasDisponibles extends javax.swing.JFrame {

    private SalasDisponiblesModelo modelo;

    /**
     * Crea una nueva instancia de la ventana SalasDisponibles y configura la
     * interfaz.
     */
    public SalasDisponibles(SalasDisponiblesModelo modelo) {
        FlatMacDarkLaf.setup();
        initComponents();
        this.modelo = modelo;
        table.setDefaultRenderer(Object.class, new TableGradientCell());
        jPanel1.putClientProperty(FlatClientProperties.STYLE, ""
                + "border:1,1,1,1,$TableHeader.bottomSeparatorColor,,10");
        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "hoverBackground:null;"
                + "pressedBackground:null;separatorColor:$TableHeader.background");
        scroll.putClientProperty(FlatClientProperties.STYLE, ""
                + "border:3,0,3,0,$Table.background,10,10");
        scroll.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, ""
                + "hoverTrackColor:null");
        testData();

        // Agregar listener para habilitar o deshabilitar el botón "Unirse"
        table.getSelectionModel().addListSelectionListener(e -> unirseBtn.setEnabled(table.getSelectedRow() != -1));

        // Deshabilitar el botón "Unirse" inicialmente
        unirseBtn.setEnabled(false);

    }

    /**
     * Método para agregar datos de prueba a la tabla. Los datos incluyen el
     * nombre de la sala, el número de personas jugando y la capacidad máxima.
     */
    private void testData() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        model.addRow(new Object[]{"Rancho Diana", 3, 4});
        model.addRow(new Object[]{"Chapo Dogo", 4, 4});
        model.addRow(new Object[]{"Juventino", 2, 4});
        model.addRow(new Object[]{"Diana", 1, 4});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fondo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        salirBtn = new javax.swing.JButton();
        unirseBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Fondo.setBackground(new java.awt.Color(28, 28, 28));

        jLabel1.setFont(new java.awt.Font("Urban Jungle", 0, 48)); // NOI18N
        jLabel1.setText("Salas    disponibles");

        salirBtn.setBackground(new java.awt.Color(102, 102, 102));
        salirBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        salirBtn.setText("Salir");
        salirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBtnActionPerformed(evt);
            }
        });

        unirseBtn.setBackground(new java.awt.Color(102, 102, 102));
        unirseBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        unirseBtn.setText("Unirse");
        unirseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unirseBtnActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setLayout(new java.awt.BorderLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre de la sala", "Numero de personas jugando", "Capacidad Maxima"
            }
        ));
        scroll.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(150);
            table.getColumnModel().getColumn(1).setPreferredWidth(50);
            table.getColumnModel().getColumn(2).setPreferredWidth(35);
        }

        jPanel1.add(scroll, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout FondoLayout = new javax.swing.GroupLayout(Fondo);
        Fondo.setLayout(FondoLayout);
        FondoLayout.setHorizontalGroup(
            FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FondoLayout.createSequentialGroup()
                .addContainerGap(433, Short.MAX_VALUE)
                .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoLayout.createSequentialGroup()
                        .addComponent(salirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(unirseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(426, 426, 426))))
            .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoLayout.createSequentialGroup()
                    .addContainerGap(255, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(248, Short.MAX_VALUE)))
        );
        FondoLayout.setVerticalGroup(
            FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FondoLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 439, Short.MAX_VALUE)
                .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unirseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
            .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FondoLayout.createSequentialGroup()
                    .addContainerGap(185, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(161, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Acción que se ejecuta al hacer clic en el botón "Salir". Cierra la
     * ventana actual.
     *
     * @param evt El evento generado al hacer clic en el botón "Salir".
     */
    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        dispose();
    }//GEN-LAST:event_salirBtnActionPerformed
    /**
     * Acción que se ejecuta al hacer clic en el botón "Unirse". Si la sala
     * seleccionada no está llena, incrementa el número de jugadores en la sala.
     * Si la sala está llena, muestra un mensaje de error.
     *
     * @param evt El evento generado al hacer clic en el botón "Unirse".
     */
    private void unirseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unirseBtnActionPerformed
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            int jugadoresActuales = (int) table.getValueAt(selectedRow, 1);
            int capacidadMaxima = (int) table.getValueAt(selectedRow, 2);

            if (jugadoresActuales < capacidadMaxima) {
                // Incrementar el número de jugadores y actualizar la tabla
                table.setValueAt(jugadoresActuales + 1, selectedRow, 1);
                JOptionPane.showMessageDialog(this, "Te has unido a la sala " + table.getValueAt(selectedRow, 0),
                        "Confirmación", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Mostrar un mensaje de error si la sala está llena
                JOptionPane.showMessageDialog(this, "La sala " + table.getValueAt(selectedRow, 0) + " está llena.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Mostrar un mensaje de advertencia si no se ha seleccionado ninguna sala
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una sala para unirte.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_unirseBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Fondo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton salirBtn;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable table;
    private javax.swing.JButton unirseBtn;
    // End of variables declaration//GEN-END:variables
}
